---
Description: This template describes a stepfunction that orchestrates the resource failover to the secondary region during a DR.
Parameters:
  LambdaSendTaskTokenName:
    Type: String
  LambdaSendTaskTokenArn:
    Type: String
  StepFunctionModuleFactoryArn:
    Type: String

Resources:
  IAMStepFunctionExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "states.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Ref LambdaSendTaskTokenArn
              - Effect: Allow
                Action:
                  - "states:StartExecution"
                  - "states:DescribeExecution"
                  - "states:StopExecution"
                Resource: "*"
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                  - xray:GetSamplingRules
                  - xray:GetSamplingTargets
                Resource: "*"

  StepFunctionLifecycleOrchestrator:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: aws-dr-orchestrator-stepfunction-lifecycle
      RoleArn: !GetAtt IAMStepFunctionExecutionRole.Arn
      TracingConfiguration:
        Enabled: true
      DefinitionString:
        Fn::Sub: |
          {
            "Comment": "Orchestrate Activate Stepfunction",
            "StartAt": "Layers",
            "States": {
              "Layers": {
                "Type": "Map",
                "Next": "Send success token",
                "Iterator": {
                  "StartAt": "Resources",
                  "States": {
                    "Resources": {
                      "Type": "Map",
                      "End": true,
                      "Iterator": {
                        "StartAt": "Call Module",
                        "States": {
                          "Call Module": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::states:startExecution.waitForTaskToken",
                            "Parameters": {
                              "StateMachineArn": "${StepFunctionModuleFactoryArn}",
                              "Input": {
                                "TaskToken.$": "$$.Task.Token",
                                "StatePayload.$": "$.StatePayload",
                                "AppName.$": "$.AppName",
                                "LifeCyclePhase.$": "$.lifecycle_phase"
                              }
                            },
                            "InputPath": "$",
                            "ResultPath": "$.output",
                            "End": true
                          }
                        }
                      },
                      "ItemsPath": "$.StatePayload.resources",
                      "Parameters": {
                        "StatePayload.$": "$$.Map.Item.Value",
                        "AppName.$": "$.AppName",
                        "lifecycle_phase.$": "$.lifecycle_phase"
                      }
                    }
                  }
                },
                "ItemsPath": "$.StatePayload",
                "Parameters": {
                  "StatePayload.$": "$$.Map.Item.Value",
                  "AppName.$": "$.AppName",
                  "lifecycle_phase.$": "$.lifecycle_phase"
                },
                "MaxConcurrency": 1
              },
              "Send success token": {
                "Type": "Task",
                "Resource": "arn:aws:states:::lambda:invoke",
                "Parameters": {
                  "FunctionName": "${LambdaSendTaskTokenName}",
                  "Payload": {
                    "TaskToken.$": "$$.Execution.Input.TaskToken",
                    "SfStartTime.$": "$$.Execution.StartTime"
                  }
                },
                "End": true
              }
            }
          }
Outputs:
  StepFunctionOrchestrateLifecycleArn:
    Value: !GetAtt StepFunctionLifecycleOrchestrator.Arn